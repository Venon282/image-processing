# -*- coding: utf-8 -*-
"""td3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x7RGid7dlFtcGTTmGLaXgs--RkfcbtvI
"""

from math import *
import random
import numpy as np
import matplotlib.pyplot as plt

def display(imglist,size=5, shape=True):
   cols = len(imglist)
   fig = plt.figure(figsize=(size*cols,size*cols))
   for i in range(0,cols):
      a = fig.add_subplot(1, cols, i+1)
      if len(imglist[i].shape) > 2 :
         subfig = plt.imshow(imglist[i], vmin=0.0, vmax=1.0)
      else :
         subfig = plt.imshow(imglist[i],cmap="gray",vmin=0.0, vmax=1.0)
      subfig.axes.get_xaxis().set_visible(False)
      subfig.axes.get_yaxis().set_visible(False)
      if shape == True:
        a.set_title(str(imglist[i].shape))
   plt.show()

def greyscale(img):
  mat = np.dot(np.ones((3,1)),np.array([[0.2126,0.7152,0.0722]]))
  nb=len(img)
  imgrey=np.zeros((nb,nb,3))
  for i in range(nb):
    for j in range(nb):
      imgrey[i,j]=np.dot(mat,img[i,j])
  return imgrey
img = plt.imread("./images/solo-256px.png")
display([img, greyscale(img)], 5)

def symetrieAbs(src):
  leni = len(src)
  lenj = len(src[0])
  out=np.zeros((leni,lenj,3))
  for i in range(leni):
    for j in range (lenj):
      out[i,j] = src[leni-i-1,j]
  return out
display([img,symetrieAbs(img)],5)

def zoom1(src,centerj,centeri,factor):
  leni = len(src)
  lenj = len(src[0])
  img = np.zeros((leni,lenj,3))
  for i in range(leni):
    for j in range(lenj):
      img[i,j] = src[int(factor*(i-centeri)+centeri),int(factor*(j-centerj)+centerj)]
  return img

def zoom(src,centerj,centeri,factor):
  leni = len(src)
  lenj = len(src[0])
  out=np.zeros((leni,lenj,3))
  for i in range(leni):
    for j in range(lenj):
      [jp,ip] = (  factor * np.array([j-centerj,i-centeri]) + np.array([centerj,centeri])  ).astype(int)
      out[jp,ip] = src[j,i]
  return out

def vraizoom(src,centerj,centeri,factor):
  leni = len(src)
  lenj = len(src[0])
  out=np.zeros((leni,lenj,3))
  for i in range(leni):
    for j in range(lenj):
      [jp,ip] = (  factor * np.array([j-centerj,i-centeri]) + np.array([centerj,centeri])  ).astype(int)
      if (ip>=0) and (ip<leni) and (jp>=0) and (jp<lenj) :
        out[jp,ip] = src[j,i]
  return out

def smartzoom(src,centerj,centeri,factor):
  leni = len(src)
  lenj = len(src[0])
  out=np.zeros((leni,lenj,3))
  for i in range(leni):
    for j in range(lenj):
      [jp,ip] = (  (1/factor) * np.array([j-centerj,i-centeri]) + np.array([centerj,centeri])  ).astype(int)
      if (ip>=0) and (ip<leni) and (jp>=0) and (jp<lenj) :
        out[j,i] = src[jp,ip]
  return out
display([img,smartzoom(img,128,128,0.5),smartzoom(img,64,64,4)],5)

display([img,vraizoom(img,128,128,0.5)],5)
display([img,vraizoom(img,64,64,4)],5)

display([img,zoom1(img,128,128,0.5),zoom(img,128,128,0.5)],5)

def rotate(src,centerj,centeri,alpha):
  leni = len(src)
  lenj = len(src[0])
  img = np.zeros((leni,lenj,3))
  for i in range(leni):
    for j in range(lenj):
      [jp,ip] = (  np.dot(np.array([[cos(alpha), -sin(alpha)],[sin(alpha),cos(alpha)]]) , np.array([j-centerj,i-centeri]) )+ np.array([centerj,centeri])  ).astype(int)
      if (ip>=0) and (ip<leni) and (jp>=0) and (jp<lenj) :
        img[jp,ip] = src[j,i]
  return img

def smartrotate(src,centerj,centeri,alpha):
  leni = len(src)
  lenj = len(src[0])
  img = np.zeros((leni,lenj,3))
  for i in range(leni):
    for j in range(lenj):
      [jp,ip] = (  np.dot(np.array([[cos(alpha), -sin(alpha)],[sin(alpha),cos(alpha)]]) , np.array([j-centerj,i-centeri]) )+ np.array([centerj,centeri])  ).astype(int)
      if (ip>=0) and (ip<leni) and (jp>=0) and (jp<lenj) :
        img[j,i] = src[jp,ip]
  return img

display( [ rotate(img,128,128,pi/2) , rotate(img,128,128,pi/3) ,rotate(img,128,128,2*pi/3) ] , 5 )
display( [ smartrotate(img,128,128,pi/2) , smartrotate(img,128,128,pi/3) ,smartrotate(img,128,128,2*pi/3) ] , 5 )

def twist(src,centerj,centeri,rho):
  leni = len(src)
  lenj = len(src[0])
  img = np.zeros((leni,lenj,3))
  for i in range(leni):
    for j in range(lenj):
      alpha = rho*sqrt(((j-centerj)**2)+((i-centeri)**2))
      [jp,ip] = (  np.dot(np.array([[cos(alpha), -sin(alpha)],[sin(alpha),cos(alpha)]]) , np.array([j-centerj,i-centeri]) )+ np.array([centerj,centeri])  ).astype(int)
      if (ip>=0) and (ip<leni) and (jp>=0) and (jp<lenj) :
        img[j,i] = src[jp,ip]
  return img

display( [ twist(img,128,128,0.01) , twist(img,128,128,0.02) ,twist(img,128,128,0.05) ] , 5 )

def compression(src):
  leni = len(src)
  lenj = len(src[0])
  img = np.zeros((leni,lenj,3))
  for i in range(leni):
    for j in range(lenj):
      alpha = rho*sqrt(((j-centerj)**2)+((i-centeri)**2))
      [jp,ip] = (  np.dot(np.array([[cos(alpha), -sin(alpha)],[sin(alpha),cos(alpha)]]) , np.array([j-centerj,i-centeri]) )+ np.array([centerj,centeri])  ).astype(int)
      if (ip>=0) and (ip<leni) and (jp>=0) and (jp<lenj) :
        img[j,i] = src[jp,ip]
  return img

img_nb = greyscale(img)
display([img_nb,compression(img_nb)],5)