# -*- coding: utf-8 -*-
"""TD1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19lAgAkO2gdIhQjphP3-aIafOiH5pCkxe
"""

# Modules
from math import *
import random
import numpy as np
import matplotlib.pyplot as plt

from PIL import Image

def display(imglist,size=5, shape=True):
 cols = len(imglist)
 fig = plt.figure(figsize=(size*cols,size*cols))
 for i in range(0,cols):
  a = fig.add_subplot(1, cols, i+1)
  if len(imglist[i].shape) > 2 :
    subfig = plt.imshow(imglist[i], vmin=0.0, vmax=1.0)
  else :
    subfig = plt.imshow(imglist[i],cmap="gray",vmin=0.0, vmax=1.0)
    subfig.axes.get_xaxis().set_visible(False)
    subfig.axes.get_yaxis().set_visible(False)
  if shape == True:
    a.set_title(str(imglist[i].shape))
    plt.show()

img = np.array([[0.98,0.43],
                [0.11,0.79]])
display([img])

img = np.array([[[0.98,0.06,0.18],
                 [0.78,0.29,0.91]],
                [[0.49,0.51,0.37],
                 [0.53,0.81,0.55]]])
display([img])

#Accès en modification
img[0,1]=[0.0,1.0,0.0]
display([img])

# Lecture de l'image téléchargée au début du TP
img = plt.imread("images/solo-256px.png")

# Sauvegarde de l'image img dans un fichier
plt.imsave("images/solo-256px-copie.png", img)

#affiche img contenue dans tableau
plt.imshow(img)

p = img[78,95]
print(p)

print("Rouge : ",p[0])
print("Vert : ",p[1])
print("Bleu : ",p[2])

img[78,95,0]

def inverse(img):
  cols = len(img)
  for i in range(0,cols):
    for j in range(0,cols):
      for p in range(0,3):
       img[i,j,p]=1-img[i,j,p]
  return img

inverse(img)

def keep_red(img):
  cols = len(img)
  for i in range(0,cols):
    for j in range(0,cols):
      for p in range(1,3):
       img[i,j,p]=0
  return img

def keep_green(img):
  cols = len(img)
  for i in range(0,cols):
    for j in range(0,cols):
      img[i,j,0]=0
      img[i,j,2]=0
  return img

def keep_blue(img):
  cols = len(img)
  for i in range(0,cols):
    for j in range(0,cols):
      for p in range(0,2):
        img[i,j,p]=0
  return img

img = plt.imread("images/solo-256px.png")
plt.imsave("images/solo-256px-inverse.png", img)
img2 = plt.imread("images/solo-256px-inverse.png")

plt.imsave("images/solo-256px-rouge.png", img)
img3 = plt.imread("images/solo-256px-rouge.png")

plt.imsave("images/solo-256px-vert.png", img)
img4 = plt.imread("images/solo-256px-vert.png")

plt.imsave("images/solo-256px-bleu.png", img)
img5 = plt.imread("images/solo-256px-bleu.png")

display([img,inverse(img2)],5)
display([img,keep_red(img3)],5)
display([img,keep_green(img4)],5)
display([img,keep_blue(img5)],5)

def extract(img, l1, c1, l2, c2):
  newimg=[]
  for ligne in range(l1,l2):
    newimg.append([])
    for colonne in range(c1,c2):
      newimg[ligne-l1].append(img[ligne][colonne])
  return np.array(newimg)

img = plt.imread("images/solo-256px.png")
img2 = extract(img, 23, 57, 95, 111)
display([img2],5)

def randimg_gsc(height, width):
  img=[]
  for i in range(0,height):
    img.append([])
    for j in range(0,width):
      img[i].append(random.random())
  return np.array(img)

def randimg_rgb(height, width):
  img=[]
  for i in range(0,height):
    img.append([])
    for j in range(0,width):
      img[i].append([random.random(),random.random(),random.random()])
  return np.array(img)

img2 = randimg_gsc(100, 200)
display([img2],5)
img2 = randimg_rgb(100, 200)
display([img2],5)

def squareBlack(height, width):
  img=[]
  for i in range(0,height):
    img.append([])
    for j in range(0,width):
      img[i].append(0)
  return np.array(img)

def triangleBlackBottomLeft(height, width):
  img=[]
  boucle = 0
  for i in range(0,height):
    img.append([])
    boucle +=1
    for j in range(0,width):
      if j<boucle:
        img[i].append(0)
      else:
        img[i].append(1)
  return np.array(img)

def triangleBlackTopRight(height, width):
  img=[]
  boucle = 0
  for i in range(0,height):
    img.append([])
    boucle +=1
    for j in range(0,width):
      if j<boucle:
        img[i].append(1)
      else:
        img[i].append(0)
  return np.array(img)


def triangleBlackTopLeft(height, width):
  img=[]
  boucle = width
  for i in range(0,height):
    img.append([])
    boucle -=1
    for j in range(0,width):
      if j<boucle:
        img[i].append(0)
      else:
        img[i].append(1)
  return np.array(img)

def triangleBlackIsoceleLeft(height, width):
  img=[]
  boucle = 0
  test = True
  for i in range(0,height):
    img.append([])
    if boucle>=floor(width//2):
      test=False
    if test == True:
      boucle +=1
    else:
      boucle -=1
    for j in range(0,width):
      if j<boucle:
        img[i].append(0)
      else:
        img[i].append(1)
  return np.array(img)

img1 = squareBlack(255, 255)
img2 = triangleBlackBottomLeft(255, 255)
img3 = triangleBlackTopRight(255, 255)
img4 = triangleBlackTopLeft(255, 255)
img5 = triangleBlackIsoceleLeft(255, 255)
display([img1, img2, img3, img4, img5],4)

def ondulation(height, width):
  img=[]
  boucle = floor(width//2)
  test = True
  sens = True
  variance = 5
  for i in range(0,height):
    img.append([])
    if boucle<=floor(width//2):
      test = True
    else:
      test = False

    if boucle>=width:
      sens = False
    elif boucle<=0:
      sens = True

    if sens==True:
      boucle +=variance
    else:
      boucle -=variance

    for j in range(0,width):
      if test==True and j<floor(width/2):
        variance+=1
      elif test==True and j>=floor(width/2):
        variance-=1
      elif test==False and j<floor(width/2):
        variance-=1
      elif test==False and j>=floor(width/2):
        variance+=1
        
      if j<boucle:
        img[i].append(1)
      else:
        img[i].append(0)
  return np.array(img)

img1 = ondulation(255, 255)
display([img1],4)